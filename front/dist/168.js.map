{"version":3,"sources":["webpack://front/./hooks/useInput.ts","webpack://front/./pages/Room/styles.ts","webpack://front/./assets/icons/SendSVG.tsx","webpack://front/./assets/icons/ListSVG.tsx","webpack://front/./pages/Room/index.tsx"],"names":["initialData","value","setValue","useState","useCallback","e","target","RoomArea","styled","Head","Right","Left","ChatMainBox","SideList","ChatWrap","ChatContent","ChatList","ChatBox","SendSVG","props","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","points","ListSVG","id","setID","userName","setUserName","userEmail","setUserEmail","users","setUsers","messageText","onMessageText","setMesaageText","useInput","roomUrl","window","location","href","split","findCh","setFindCh","messages","setMessages","socketRef","useRef","scrollRef","data","userData","useQuery","axios","then","res","onSuccess","name","email","onError","error","console","log","channelData","channelList","findUrl","find","url","scrollToBottom","current","scrollIntoView","behavior","useEffect","socketIOClient","on","text","undefined","emit","dep","connectedUsers","close","onSubmit","preventDefault","to","map","user","i","key","src","gravatar","s","d","alt","msg","ref","style","fontWeight","type","placeholder","onChange"],"mappings":"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","file":"168.js","sourcesContent":["import { Dispatch, SetStateAction, useCallback, useState, ChangeEvent } from 'react';\n\ntype ReturnTypes<T> = [T, (e: ChangeEvent<HTMLInputElement>) => void, Dispatch<SetStateAction<T>>];\n\nconst useInput = <T>(initialData: T): ReturnTypes<T> => {\n  const [value, setValue] = useState(initialData);\n  const handler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setValue((e.target.value as unknown) as T);\n  }, []);\n  return [value, handler, setValue];\n};\n\nexport default useInput;\n","import styled from 'styled-components';\n\nexport const RoomArea = styled.div`\n  width: 100%;\n  height: 100%;\n  max-width: 1160px;\n  margin: 0 auto;\n`;\n\nexport const Head = styled.header`\n  width: 100%;\n  height: 10%;\n  max-width: 1160px;\n  margin: 0 auto;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport const Right = styled.div``;\n\nexport const Left = styled.div``;\n\nexport const ChatMainBox = styled.div`\ndisplay: flex;\nwidth: 100%;\nmax-width: 1160px;\nheight: 100%;\nmax-height:600px;\ncolumn-gap: 7px;\n}\n`;\n\nexport const SideList = styled.div`\n  width: 100%;\n  max-width: 250px;\n  background-color: #e9ebee;\n  color: #000;\n  border-radius: 7px;\n  & > div {\n    padding: 20px 21px;\n    font-size: 1.5rem;\n    height: 52px;\n  }\n\n  & > hr{\n    width:83%;\n    margin-top:25px;\n  }\n  & > ul{\n    list-style:none;\n    padding: 0 22px;\n    li{\n      padding : 3px;\n      img{\n        border-radius:100%\n      }\n    }\n  }\n`;\n\nexport const ChatWrap = styled.div`\nborder-radius: 7px;\n  max-width: 910px;\n  width: 100%;\n  height: 100%;\n  max-height: 600px;\n  background-color: #e9ebee;\n  color: #000;\n`;\n\nexport const ChatContent = styled.div`\n  height: 91%;\n  max-height: 92%;\n  position: relative;\n`;\n\nexport const ChatList = styled.div`\n  width: 100%;\n  position: absolute;\n  overflow-y: auto;\n  left: 0;\n  max-height: 100%;\n  bottom: 0;\n  padding: 38px 20px;\n  word-break: break-all;\n\n  & > div {\n   display:flex;\n    margin-top:16px;\n   img {\n    border-radius: 100%;\n    height: 35px;\n   }\n   div {\n    display: flex;\n    flex-direction: column;\n    margin-left: 9px;\n   }\n  }\n`;\n\nexport const ChatBox = styled.div`\n  height: 100%;\n  max-height: 8%;\n  width:96%;\n  position: relative;\n  overflow: hidden;\n  margin: -9px auto;\n  border-radius: 5px;\n  & form {\n    display: flex;\n    height: 100%;\n    position: relative;\n    & > input {\n      width: 100%;\n      height: 100%;\n      background-color: #fff;\n      border: none;\n      color: #000;\n      outline: none;\n      font-size: 1.1rem;\n      padding: 0 20px;\n    }\n\n    & > button {\n      position: absolute;\n      top: 0;\n      z-index: 1;\n      width: 7%;\n      height: 100%;\n      background-color:#3F6797 ;\n      border: none;\n      color: ffffff;\n      cursor: pointer;\n      right: 0;\n      &:hover {\n        color: C5C2C2;\n        border: C5C2C2;\n      }\n    }\n  }\n`;\n","import React from 'react';\nexport default function SendSVG(props: React.SVGProps<SVGAElement>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={24}\n      height={24}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\"></line>\n      <polygon points=\"22 2 15 22 11 13 2 9 22 2\"></polygon>\n    </svg>\n  );\n}\n","import React from 'react';\nexport default function ListSVG(props: React.SVGProps<SVGAElement>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={52}\n      height={34}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <line x1=\"8\" y1=\"6\" x2=\"21\" y2=\"6\"></line>\n      <line x1=\"8\" y1=\"12\" x2=\"21\" y2=\"12\"></line>\n      <line x1=\"8\" y1=\"18\" x2=\"21\" y2=\"18\"></line>\n      <line x1=\"3\" y1=\"6\" x2=\"3.01\" y2=\"6\"></line>\n      <line x1=\"3\" y1=\"12\" x2=\"3.01\" y2=\"12\"></line>\n      <line x1=\"3\" y1=\"18\" x2=\"3.01\" y2=\"18\"></line>\n    </svg>\n  );\n}\n","import useInput from '@hooks/useInput';\nimport axios, { AxiosResponse } from 'axios';\nimport { ChatBox, ChatContent, ChatList, ChatMainBox, ChatWrap, Head, Left, Right, RoomArea, SideList } from './styles';\nimport React, { FC, useCallback, useEffect, useRef, useState } from 'react';\nimport gravatar from 'gravatar';\nimport { useQuery } from 'react-query';\nimport socketIOClient from 'socket.io-client';\nimport useHistoryState from '@hooks/useHistroyState';\nimport { Link } from 'react-router-dom';\nimport SendSVG from '@assets/icons/SendSVG';\nimport ListSVG from '@assets/icons/ListSVG';\n\ninterface RoomProps {\n  roomName: string;\n  roomDep: string;\n  roomUrl: string;\n}\ninterface msg {\n  roomUrl: string;\n  msg: string;\n  userName: string;\n}\n\nconst Room = () => {\n  const [id, setID] = useState(0);\n  const [userName, setUserName] = useState('');\n  const [userEmail,setUserEmail]=useState('');\n  const [users,setUsers]=useState<any[]>([]);\n  const [messageText, onMessageText, setMesaageText] = useInput('');\n  const roomUrl = window.location.href.split('/');\n  const [findCh, setFindCh] = useState<any>({});\n  const [messages, setMessages] = useState<any[]>([]);\n  const socketRef = useRef<any>();\n  const scrollRef = useRef<any>(null);\n\n  // if (socket) socket.emit('join', findCh.name, findCh.dep, findCh.url, id); //chat gateway room:{newRoom,hostID}\n\n  const getUser = () => {\n    return axios.get('/api/auth/me/jwt').then((res: AxiosResponse) => res.data);\n  };\n  const { data: userData } = useQuery(['uers'], getUser, {\n    onSuccess: (userData) => {\n      setID(userData.id);\n      setUserName(userData.name);\n      setUserEmail(userData.email);\n    },\n    onError: (error) => {\n      console.log(error);\n    },\n  });\n\n  const getChannel = () => {\n    return axios.get('/api/chat/list').then((res) => res.data.channelList);\n  };\n\n  const { data: channelData } = useQuery(['channels'], getChannel, {\n    onSuccess: (channelData) => {\n      console.log('channeldata', channelData);\n\n      const findUrl = channelData.find((url: any) => url.url === roomUrl[4]);\n      console.log('찾아라라라라라라', findUrl);\n      setFindCh(findUrl);\n\n    },\n    onError: (error) => {\n      console.log(error);\n    },\n  });\n \n  console.log('ttfd', messages);\n\n  const scrollToBottom =() =>{\n    scrollRef.current.scrollIntoView({ behavior: \"smooth\" })\n  }\n\n\n  useEffect(() => {\n    // const socket = socketIOClient('http://localhost:3333/chat');\n    socketRef.current = socketIOClient('http://localhost:3333/chat');\n\n    socketRef.current.on('msgToClient', (data: any) => {\n      console.log('test1234', data[1]);\n\n      setMessages((messages)=>[...messages,{userEmail:data[3],userName:data[1],text:data[2]}]);\n\n      scrollToBottom();\n    },[scrollToBottom]);\n\n   \n    if (findCh !== null && id !== 0 && userName !== '' && userName !== undefined) {\n      console.log('join room');\n      socketRef.current.emit('join', findCh.name, findCh.dep, findCh.url, id, userName,userEmail,findCh.id);\n\n   \n   \n    //   socketRef.current.on('userDisconnect',(id:any)=>{\n    //     console.log('ddd',id);\n    //      setUsers((users)=>{\n    //         console.log('dfdf',users)\n    //         return  users.filter((user)=>user.socketID!== id)\n    //       })\n    // })\n\n    }\n    socketRef.current.on('joinRoom', (connectedUsers: any) => {\n      console.log('호우!', connectedUsers);\n      setUsers(connectedUsers)\n    \n    });\n\n    return () => {\n      socketRef.current.close();\n    };\n  }, [findCh, id, userName,userEmail]);\n\n  // console.log('유저입니다', users);\n\n  const onSubmit = useCallback(\n    (e) => {\n      // const socket = socketIOClient('http://localhost:3333/chat');\n\n      e.preventDefault();\n      socketRef.current.emit('msgToServer', roomUrl[4], userName, messageText,userEmail);\n      setMesaageText('');\n    },\n    [userName, messageText,userEmail],\n  );\n\n  // useEffect(() => {\n  //   const socket = socketIOClient('http://localhost:3333/chat');\n\n  //   socket.on('msgToClient', (data: any) => {\n  //     console.log('test1234', data[1]);\n\n  //     setMessages((messages) => [...messages, { user: data[1], text: data[2] }]);\n  //   });\n\n  //   socket.on('joinRoom', (id: number) => {\n  //     console.log('호우!', id);\n  //   });\n  // });\n\n  // console.log('s', messages);\n\n  // console.log('mm', messageText);\n\n\n  return (\n    <RoomArea>\n      <Head>\n        <Left>\n          <Link to=\"/\">\n            <h1>CodeHouse</h1>\n          </Link>\n        </Left>\n        <Right>\n          <Link to=\"/listroom\">\n            <span>\n              <ListSVG />\n            </span>\n          </Link>\n        </Right>\n      </Head>\n      <ChatMainBox>\n        <SideList>\n          <div>Users</div>\n            <hr />\n            <ul>\n              {\n                users.map((user,i)=>(\n                  <li key={user.userName+i}>\n                    <img src={gravatar.url(user.userEmail,{ s: '15px', d: 'retro' })} alt={user.userName} />\n                    <span>{user.userName}</span>\n                  </li>\n\n                ))\n              }\n            </ul>\n        </SideList>\n        <ChatWrap>\n          <ChatContent>\n            <ChatList>\n   \n              \n              {messages.map( (msg,i) => (\n            \n         \n            <div ref={scrollRef} key={msg.userName + i}>\n            <img src={gravatar.url(msg.userEmail, { s: '35px', d: 'retro' })} alt={msg.userName} />\n\n                  <div>\n                    {msg.text &&\n            <span style={{ fontWeight: 700 }}>{msg.userName} </span>}\n\n                      <span>{msg.text}</span>\n                  </div>\n                </div>\n                \n             \n              ))}\n            \n            </ChatList>\n          </ChatContent>\n          <ChatBox>\n            <form onSubmit={onSubmit}>\n              <input type=\"text\" placeholder=\"Send a Message\" onChange={onMessageText} value={messageText} />\n              <button type=\"submit\">\n                <SendSVG />\n              </button>\n            </form>\n          </ChatBox>\n        </ChatWrap>\n      </ChatMainBox>\n    </RoomArea>\n  );\n};\n\nexport default Room;\n"],"sourceRoot":""}